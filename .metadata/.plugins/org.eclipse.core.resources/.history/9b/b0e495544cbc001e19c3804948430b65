package boot.data.service;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Optional;
import java.util.UUID;
import java.util.Objects;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.DeleteObjectRequest;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.util.IOUtils;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
public class S3Service {

	private final AmazonS3Client amazonS3Client;
	
	@Value("${cloud.aws.s3.bucket}")
	private String bucket;
	
	
	public String upload(MultipartFile image) {
	    if(image.isEmpty() || Objects.isNull(image.getOriginalFilename())){
	      throw new IllegalArgumentException("Error: MultipartFile -> File로 전환이 실패했습니다.");
	    }
	    return this.uploadImage(image);
	  }

	  private String uploadImage(MultipartFile image) {
	    this.validateImageFileExtention(image.getOriginalFilename());
	    try {
	      return this.uploadImageToS3(image);
	    } catch (IOException e) {
	      throw new IllegalArgumentException("Error: 업로드 실패");
	    }
	  }

	  private void validateImageFileExtention(String filename) {
	    int lastDotIndex = filename.lastIndexOf(".");
	    if (lastDotIndex == -1) {
	      throw new IllegalArgumentException("Error: 파일 오류");
	    }

	    String extention = filename.substring(lastDotIndex + 1).toLowerCase();
	    List<String> allowedExtentionList = Arrays.asList("jpg", "jpeg", "png", "gif");

	    if (!allowedExtentionList.contains(extention)) {
	      throw new  IllegalArgumentException("Error: INVALID_FILE_EXTENTION");
	    }
	  }
	  
	  
	 

	  private String uploadImageToS3(MultipartFile image) throws IOException {
	    String originalFilename = image.getOriginalFilename(); //원본 파일 명
	    String extention = originalFilename.substring(originalFilename.lastIndexOf(".")); //확장자 명

	    String s3FileName = UUID.randomUUID().toString().substring(0, 10) + originalFilename; //변경된 파일 명

	    InputStream is = image.getInputStream();
	    byte[] bytes = IOUtils.toByteArray(is);

	    ObjectMetadata metadata = new ObjectMetadata();
	    metadata.setContentType("image/" + extention);
	    metadata.setContentLength(bytes.length);
	    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);

	    try{
	      PutObjectRequest putObjectRequest =
	          new PutObjectRequest(bucket, s3FileName, byteArrayInputStream, metadata)
	              .withCannedAcl(CannedAccessControlList.PublicRead);
	      amazonS3Client.putObject(putObjectRequest); // put image to S3
	    }catch (Exception e){
	      throw new  IllegalArgumentException("Error: PUT_OBJECT_EXCEPTION");
	    }finally {
	      byteArrayInputStream.close();
	      is.close();
	    }

	    return amazonS3Client.getUrl(bucket, s3FileName).toString();
	  }

	  public void deleteImageFromS3(String imageAddress){
	    String key = getKeyFromImageAddress(imageAddress);
	    try{
	    	amazonS3Client.deleteObject(new DeleteObjectRequest(bucket, key));
	    }catch (Exception e){
	      throw new IllegalArgumentException("Error: IO_EXCEPTION_ON_IMAGE_DELETE");
	    }
	  }

	  private String getKeyFromImageAddress(String imageAddress){
	    try{
	      URL url = new URL(imageAddress);
	      String decodingKey = URLDecoder.decode(url.getPath(), "UTF-8");
	      return decodingKey.substring(1); // 맨 앞의 '/' 제거
	    }catch (MalformedURLException | UnsupportedEncodingException e){
	      throw new IllegalArgumentException("Error: IO_EXCEPTION_ON_IMAGE_DELETE");
	    }
	  }
	
	
}
