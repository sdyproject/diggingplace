package boot.data.controller;

import java.util.HashMap;

/*import java.util.HashMap;*/

import javax.servlet.http.HttpSession;


import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import boot.data.service.KakaoAPI;
import boot.data.service.MemberService;




@Controller
public class LoginController {

	@Autowired
	MemberService service;
	
	
	@Autowired private KakaoAPI kakao;
	
	
	
	
	@GetMapping("/login/main")
	public String loginform(HttpSession session, Model model) {
		String loginemail = (String) session.getAttribute("loginemail");

		String loginok = (String) session.getAttribute("loginok");

		if (loginok == null)
			return "layout2/login/loginform";

		else {

			String name = service.getMemberName(loginemail);
			model.addAttribute("member_name", name);
			return "/login/logoutform";

		}
	}


	@PostMapping("/member/loginprocess")
	public String loginprocess(String email, String pass, HttpSession session,
			@RequestParam(required = false) String cbsave) {

		int check = service.LoginEmailPassCheck(email, pass);
		if (check == 1) {
			session.setAttribute("loginemail", email);
			session.setAttribute("loginok", "loginok");
			session.setAttribute("saveok", cbsave);
			return "redirect:/";
		}
		
		return "redirect:/member/loginform"; 
	}

	
	
	@GetMapping("/member/loginError")
	@ResponseBody
	public int loginError(String email, String pass) {
		int check = service.LoginEmailPassCheck(email, pass);
		System.out.println(email + " " + pass);
		System.out.println(check);
		return check;
	}
	
	
	
	  @GetMapping("/login/logoutprocess") 
	  public String logout(HttpSession session) {


	  session.removeAttribute("loginok");
	  
	  return "redirect:/"; 
	  }
	 
	
		
		  @RequestMapping(value = "/kakao/login") public String
		  Kakaologin(@RequestParam("code") String code, HttpSession session) { String
		  access_Token = kakao.getAccessToken(code); HashMap<String, Object>
		  kakaologinok = kakao.getUserInfo(access_Token);
		  System.out.println("login Controller : " + kakaologinok);
		  
		  // 클라이언트의 이메일이 존재할 때 세션에 해당 이메일과 토큰 등록 if (kakaologinok.get("email") != null)
		  { session.setAttribute("kakaologinok", kakaologinok.get("email"));
		  session.setAttribute("access_Token", access_Token); } 
		  return "layout";
		  
		  
		  
		  }
		  
		  
			
			  @RequestMapping(value="/kakao/logout") public String Kakaologout(HttpSession
			  session) { kakao.kakaoLogout((String)session.getAttribute("access_Token"));
			  session.removeAttribute("access_Token"); session.removeAttribute("kakaologinok");
			  return "layout"; }
			 
 


}
