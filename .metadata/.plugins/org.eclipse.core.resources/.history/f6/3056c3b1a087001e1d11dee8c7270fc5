package boot.data.controller;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import boot.data.dto.ExhibitionDto;

import boot.data.service.ExhibitionLikeService;
import boot.data.service.ExhibitionService;
import boot.data.service.MemberService;

@Controller
public class ExhibitionController {

	@Autowired
	ExhibitionService eservice;

	@Autowired
	MemberService mservice;

	@Autowired
	ExhibitionLikeService lservice;

	// 전시회 리스트페이지
	@GetMapping("/exhibition/exhibitionlist")
	public ModelAndView list(HttpSession session, Model model,
			@RequestParam(value = "currentPage", defaultValue = "1") int currentPage) {

		ModelAndView eview = new ModelAndView();
		int listsize = eservice.getTotalCount();

		int totalCount = eservice.getTotalCount();
		int totalPage;
		int startPage;
		int endPage;
		int start;
		int perPage = 9;
		int perBlock = 5;

		// 총 페이지 개수
		totalPage = totalCount / perPage + (totalCount % perPage == 0 ? 0 : 1);
		// 각블럭의 시작페이지.. 현재페이지가 3(s:1, e:5) 6(s:6, e:10)
		startPage = (currentPage - 1) / perBlock * perBlock + 1;
		endPage = startPage + perBlock - 1;
		// 총페이지가8 (6~10 ... endpage를 8로 수정해주어야함.)
		if (endPage > totalPage)
			endPage = totalPage;
		// 각페이지에서 불러올 시작번호
		start = (currentPage - 1) * perPage;
		// 각페이지에서 필요한 게시글 가져오기

		List<ExhibitionDto> list = eservice.getAllData(start, perPage);
		System.out.println("list:" + list);

		

		String loginemail = (String) session.getAttribute("loginemail");
		System.out.println(loginemail);
		String member_num = mservice.findEmailMemberNum(loginemail);
		System.out.println(member_num);
		
		 List<String> elist = new ArrayList<String>(); 
		 List<Integer> llist = new ArrayList<Integer>(); 
		 List<Integer> clist = new ArrayList<Integer>(); 

		for (int i = 0; i < list.size(); i++) {

			// 리스트에 있는 전시회 num 가져오기
			// 

			String exhibition_num = list.get(i).getExhibition_num();
			
			elist.add(exhibition_num);
			
			model.addAttribute("exhibition_num", exhibition_num);
			System.out.println("exhibition_num:"+exhibition_num);
			
			  int Likes = lservice.exhibitionLikeCount(exhibition_num);
			  System.out.println("Likes:" + Likes); model.addAttribute("Likes", Likes);
			 
			  llist.add(Likes);
			  
			  System.out.println("elist:" + elist); model.addAttribute("elist", elist);
			  System.out.println("llist:" + llist); model.addAttribute("llist", llist);
			  System.out.println("clist:" + clist); model.addAttribute("clist", clist);
			  
			  int like_check = lservice.exhibitionLikeCheck(exhibition_num, member_num);
			  System.out.println("like_check:"+like_check);
			  clist.add(like_check);
			  
			  model.addAttribute("like_check", like_check);
			  
			 

		}

		model.addAttribute("member_num", member_num);

		int no = totalCount - (currentPage - 1) * perPage;
		eview.addObject("totalCount", totalCount);
		eview.addObject("totalPage", totalPage);
		eview.addObject("startPage", startPage);
		eview.addObject("endPage", endPage);
		eview.addObject("perBlock", perBlock);
		eview.addObject("currentPage", currentPage);
		eview.addObject("no", no);

		eview.addObject("list", list);
		eview.addObject("listsize", listsize);
		eview.setViewName("/exhibition/exhibitionlist");

		return eview;

	}

	// 전시회 상세페이지
	@GetMapping("/exhibition/exhibitiondetail")
	public ModelAndView detail(String exhibition_num, HttpSession session, Model model) {

		ModelAndView edview = new ModelAndView();

		/* List<ExhibitionDto> elist = eservice.getAllData(); */
		/* System.out.println("elist:"+elist); */
		String loginemail = (String) session.getAttribute("loginemail");
		System.out.println("loginemail:" + loginemail);

		String member_num = mservice.findEmailMemberNum(loginemail);
		System.out.println("member_num:" + member_num);

		ExhibitionDto edto = eservice.getExhibitionData(exhibition_num);
		System.out.println("exhibition_num:" + exhibition_num);

		int like_check = lservice.exhibitionLikeCheck(exhibition_num, member_num);
		System.out.println("like_check:" + like_check);

		int Like = lservice.exhibitionLikeCount(exhibition_num);

		System.out.println("Like:" + Like);

		model.addAttribute("Like", Like);

		model.addAttribute("like_check", like_check);
		model.addAttribute("member_num", member_num);

		/* edview.addObject("elist", elist); */
		edview.addObject("Edto", edto);

		edview.setViewName("/exhibition/exhibitiondetail");

		return edview;
	}

	// 지역별 전시회리스트 정렬
	@GetMapping("/exhibition/locationsort")
	public ModelAndView checklist(@RequestParam(required = false, value = "location") String location,Model model,HttpSession session) {

		System.out.println(location);

		ModelAndView model4 = new ModelAndView();
		int listsize = eservice.getLocationSortCount(location);

		List<ExhibitionDto> list = eservice.getLocationData(location);
		
		String loginemail = (String) session.getAttribute("loginemail");
		System.out.println(loginemail);
		String member_num = mservice.findEmailMemberNum(loginemail);
		System.out.println(member_num);
		
		 List<String> elist = new ArrayList<String>(); 
		 List<Integer> llist = new ArrayList<Integer>(); 
		 List<Integer> clist = new ArrayList<Integer>(); 

		for (int i = 0; i < list.size(); i++) {

			// 리스트에 있는 전시회 num 가져오기
			// 이렇게만 가져오면 1번만 가져와진다 리스트로 전시회 뽑는거라서

			String exhibition_num = list.get(i).getExhibition_num();
			
			elist.add(exhibition_num);
			
			model.addAttribute("exhibition_num", exhibition_num);
			System.out.println("exhibition_num:"+exhibition_num);
			
			  int Likes = lservice.exhibitionLikeCount(exhibition_num);
			  System.out.println("Likes:" + Likes); model.addAttribute("Likes", Likes);
			 
			  llist.add(Likes);
			  
			  System.out.println("elist:" + elist); model.addAttribute("elist", elist);
			  System.out.println("llist:" + llist); model.addAttribute("llist", llist);
			  System.out.println("clist:" + clist); model.addAttribute("clist", clist);
			  
			  int like_check = lservice.exhibitionLikeCheck(exhibition_num, member_num);
			  System.out.println("like_check:"+like_check);
			  clist.add(like_check);
			  
			  model.addAttribute("like_check", like_check);
			  
			 

		}
		
		model4.addObject("location", location);
		model4.addObject("list", list);
		model4.addObject("listsize", listsize);

		model4.setViewName("/exhibition/exhibitionlist");

		return model4;
	}

	@GetMapping("/exhibition/pricefree")
	public ModelAndView pricefree(HttpSession session, Model model) {
		ModelAndView model1 = new ModelAndView();
		List<ExhibitionDto> list = eservice.getPriceFree();
		
		
		String loginemail = (String) session.getAttribute("loginemail");
		System.out.println(loginemail);
		String member_num = mservice.findEmailMemberNum(loginemail);
		System.out.println(member_num);
		
		 List<String> elist = new ArrayList<String>(); 
		 List<Integer> llist = new ArrayList<Integer>(); 
		 List<Integer> clist = new ArrayList<Integer>(); 

		for (int i = 0; i < list.size(); i++) {

			// 리스트에 있는 전시회 num 가져오기
			// 이렇게만 가져오면 1번만 가져와진다 리스트로 전시회 뽑는거라서

			String exhibition_num = list.get(i).getExhibition_num();
			
			elist.add(exhibition_num);
			
			model.addAttribute("exhibition_num", exhibition_num);
			System.out.println("exhibition_num:"+exhibition_num);
			
			  int Likes = lservice.exhibitionLikeCount(exhibition_num);
			  System.out.println("Likes:" + Likes); model.addAttribute("Likes", Likes);
			 
			  llist.add(Likes);
			  
			  System.out.println("elist:" + elist); model.addAttribute("elist", elist);
			  System.out.println("llist:" + llist); model.addAttribute("llist", llist);
			  System.out.println("clist:" + clist); model.addAttribute("clist", clist);
			  
			  int like_check = lservice.exhibitionLikeCheck(exhibition_num, member_num);
			  System.out.println("like_check:"+like_check);
			  clist.add(like_check);
			  
			  model.addAttribute("like_check", like_check);
			  
			 

		}

		model1.addObject("listsize", list.size());
		model1.addObject("list", list);
		model1.setViewName("/exhibition/exhibitionlist");

		return model1;
	}

	@GetMapping("/exhibition/priceexpensive")
	public ModelAndView priceex(HttpSession session, Model model) {
		ModelAndView model2 = new ModelAndView();
		List<ExhibitionDto> list = eservice.getPriceExpensive();

		model2.addObject("listsize", list.size());
		model2.addObject("list", list);
		model2.setViewName("/exhibition/exhibitionlist");

		return model2;
	}

	// 좋아요순 전시회리스트 정렬
	@GetMapping("/exhibition/likesort")
	public ModelAndView likesort(HttpSession session, Model model) {
		ModelAndView model3 = new ModelAndView();
		List<ExhibitionDto> list = eservice.getLikeSortCount();

		model3.addObject("listsize", list.size());
		model3.addObject("list", list);
		model3.setViewName("/exhibition/exhibitionlist");

		return model3;
	}

	@GetMapping("/exhibition/mylikedelete")
	@ResponseBody
	public void deleteLike(@RequestParam String exhibition_num, HttpSession session) {
		String loginemail = (String) session.getAttribute("loginemail");
		String member_num = mservice.findEmailMemberNum(loginemail);

		lservice.deleteExhibitionLike(exhibition_num, member_num);
	}

}
